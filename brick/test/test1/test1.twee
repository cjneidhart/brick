:: StoryTitle
Test 1

:: StoryData
{
  "ifid": "D5585FCC-9F03-41AE-9D24-73BF341E66E6",
  "format": "Brick",
  "format-version": "0.0.1"
}


:: Start
@($name = "Chris")
@(_food = "Banana")
@(_menu = [_food, "orange", "bread"])
Hello, $name. The food today is _food.
@($money = 5_000_000) You have \$$money.toLocaleString() in your bank account.

Lorem ipsun is a trad/* BLOCK

COMMENT **/itional fil// LINE COMMENT
ler text.
single line break
@($bla = 5, $fish = "red"; $one = 1, $two = "2";)

double line break. <em title="hello World!">Then some emphasized text</em>.<br>
<br>
Down here is a @link("L I N K", (event) => {
  console.log(event);
  alert("Congrats! You clicked a link!");
}).

Now we're including a passage:

@include("Passage \"3\"")

Now let's try a link: @link('Passage 2', 'Passage 2') or maybe [[Passage 2]]

@link("Test out some loops", "Loop Test")

[[Test input macros|Input Macros]]

[[Test modal dialogs->Modal Test]]

[[Switch Test<-Test out @switch macros]]

@link("Do/Redo Test", "Do/Redo Test")

[[Error Test]]

[[Captures Test]]

[[Naked Variable Test]]

[[Template Strings Test]]

[[Dynamic Attributes Test]]

[[RegExp Literal Test]]

[[Later Test]]

[[Append Test]]

[[Punt Test]]

[[@macro test]]

Here's a big block:
<div style="height: 1000px; background-color: green; width: 100px;">HELLO</div>


:: Passage 2
You have navigated to Passage 2.

@linkReplace("Click here to reveal the way back") {
  @link("Go Back", "Start")
}


:: Passage "3"
Congrats!
You've @=("@print('included')") a passage.


:: Loop Test
Test \@while:
@($i = 0)

<ul>@while($i <= 10) {
  <li>List Item Number $i</li>
  @($i++)
}</ul>

Test \@for:

@($a = ["apple", "orange", "banana"])
<ol>@for(_food of $a) {
  <li>_food</li>
}</ol>

Test \@break:<br>
Expected: 1 2 3 4 5<br>
Actual:
@(_i = 0)
@while(true) {
  @(_i++)
  @(console.log(_i))
  _i
  @if(_i >= 5) {
    @break
  }
}

Test \@continue:<br>
Expected: 1 2 20 3 4 40 5 6 60 7 8 80 9 10 100<br>
Actual:
@(_i = 0)
@while(_i < 10) {
  @(_i++, _j = _i * 10)
  _i
  @if(_i % 2) { @continue }
  _j
}

@link("return", "Start")


:: Input Macros

Here's a checkbox:

@checkBox($ham, "Would you like Ham?")

Text box:

@textBox($horse, "Name your horse")

@link("return", "Start")


:: Modal Test

@linkReplace("Show a modal") {
  @(dialog.showPassage("Sample Modal"))
  @link("return", "Start")
}


:: Sample Modal
This is a modal!


:: Switch Test
@(_value = "quark")
Test 1: @switch(_value) {
  @case("Not this one") {
    ERROR 2
  }
  @case("banana", "quark") {
    It worked!
  }
  @case(265) {
    ERROR 3
  }
}

Test 2: @switch(_value) {
  @case("foo", "bar") {
    ERROR 3
  }
  @default {
    CORRECT
  }
}

Test 3: @if(!window.Math) {
  ERROR
} @else {
  CORRECT
}

@link("return", "Start")


:: Do/Redo Test
@(_counter = 0)
Counter: @redoable { _counter }

@link("Click this to increment the counter, then call redo()", () => {
  _counter++;
  engine.redo();
})

@link("return", "Start")


:: Error Test
@link("Start", "Start")

Here's an error: [[Passage|Maybe->Maybe Not]]


:: Captures Test
Here's a list:
<ul>
  @for(_i of [1, 2, 3, 4]) {
    <li>@link("Link #" + _i, () => alert("You clicked Link #" + _i + "!"))</li>
  }
</ul>

[[Start]]


:: Naked Variable Test
[[Start]]

@($player = { name: 'Chris', strength: 15 })
Your name is $player.name and your strength is $player.strength

@(_player = $player, $player.inventory = ["sword", "hammer"])
You are carrying a _player.inventory[0] and a _player.inventory[
  Number("001")
].

// Don't put functions in variables
@(_sayNumber = (number) => "Hello! Your number is " + number)
_sayNumber(5 + 7)


:: Template Strings Test
[[Start]]

@(_x = "world")
@print(`hello ${_x}`)


:: Dynamic Attributes Test
[[Start]]

@(_title = "Hello World")
<span title=(_title + "!")>HOVER ME</span>


:: RegExp Literal Test
[[Start]]

@-(/ok/.exec("big ok match"))

@-(6.6 / 3.3 === 2 ? "ok" : "fail")


:: Later Test
[[Start]]

<span#replace-me-first.foo>This text should be replaced immediately.</span>

<span#replace-me-second>This text should be replaced after two seconds.</span>

@later {
  @(document.getElementById("replace-me-first").textContent = "OK!")
}
@later(2000) {
  @(document.getElementById("replace-me-second").textContent = "Excellent!")
}


:: Append Test
[[Start]]

The following paragraph should be "1 2 3":
<p#testParagraph>ERROR</p>

@later {
  @replace("#testParagraph") { 2 }
  @prepend("#testParagraph") { 1 }
  @append("#testParagraph") { 3 }
}


:: Punt Test
This page sets <code>\_x</code> to <code>5</code>.
@(_x = 5)
@punt(_x)

[[Punt Test 2]]

:: Punt Test 2
<code>\_x</code> is now: <code>_x</code>

[[Punt Test 3]]

:: Punt Test 3
<code>\_x</code> is now: <code>_x</code>

[[Start]]


:: @macro test
[[Start]]
@macro(_speechBubble, _speaker, _text) {
  <div class="speech-bubble">
    <strong>_speaker</strong>
    <p>_text</p>
  </div>
}

_speechBubble("Guard", "Come with me. The King requests your presence.")
