:: StoryTitle
Test 1

:: StoryData
{
  "ifid": "D5585FCC-9F03-41AE-9D24-73BF341E66E6",
  "format": "Brick",
  "format-version": "0.0.1"
}

:: Start
@($name = "Chris")
@(_food = "Banana")
@(_menu = [_food, "orange", "bread"])
Hello, $name. The food today is _food.

Lorem ipsun is a trad/* BLOCK

COMMENT **/itional fil// LINE COMMENT
ler text.
single line break
@($bla = 5, $fish = "red"; $one = 1, $two = "2";)

double line break. <em title="hello World!">Then some emphasized text</em>.<br>
<br>
Down here is a @link("L I N K", (event) => {
  console.log(event);
  alert("Congrats! You clicked a link!");
}).

Now we're including a passage:

@include("Passage \"3\"")

Now let's try a link: @linkTo('Passage 2') or maybe [[Passage 2]]

@linkTo("Loop Test", "Test out some loops")

// @linkTo("Input Macros", "Test input macros")
[[Test input macros|Input Macros]]

[[Test modal dialogs->Modal Test]]

[[Switch Test<-Test out @switch macros]]

@linkTo("Do/Redo Test")

[[Error Test]]

[[Captures Test]]

[[Naked Variable Test]]

[[Template Strings Test]]

[[Dynamic Attributes Test]]

[[RegExp Literal Test]]

Here's a big block:
<div style="height: 1000px; background-color: green; width: 100px;">HELLO</div>


:: Passage 2
You have navigated to Passage 2.

@linkReplace("Click here to reveal the way back") {
  @linkTo("Start", "Go Back")
}


:: Passage "3"
Congrats!
You've @=("@print('included')") a passage.


:: Loop Test
Test \@while:
@($i = 0)
<ul>@while($i <= 10) {
  <li>List Item Number $i</li>
  @($i++)
}</ul>
\
Test \@for:
@($a = ["apple", "orange", "banana"])
<ol>@for(_food of $a) {
  <li>_food</li>
}</ol>
\
Test \@break:<br>
Expected: 1 2 3 4 5<br>
Actual:
@(_i = 0)
@while(true) {
  @(_i++)
  _i
  @if(_i >= 5) {
    @break()
  }
}

Test \@continue:<br>
Expected: 1 2 20 3 4 40 5 6 60 7 8 80 9 10 100<br>
Actual:
@(_i = 0)
@while(_i < 10) {
  @(_i++, _j = _i * 10)
  _i
  @if(_i % 2) { @continue() }
  _j
}

@linkTo("Start", 'return')


:: Input Macros

Here's a checkbox:

@checkBox($ham, "Would you like Ham?")

@linkTo("Start", 'return')


:: Modal Test

@linkReplace("Show a modal") {
  @(Dialog.showPassage("Sample Modal"))
  @linkTo("Start", "return")
}


:: Sample Modal
This is a modal!


:: Switch Test
@(_value = "quark")
Test 1: @switch(_value) {
  @case("Not this one") {
    ERROR 2
  }
  @case("banana", "quark") {
    It worked!
  }
  @case(265) {
    ERROR 3
  }
}

Test 2: @switch(_value) {
  @case("foo", "bar") {
    ERROR 3
  }
  @default {
    CORRECT
  }
}

Test 3: @if(!window.Math) {
  ERROR
} @else {
  CORRECT
}

@linkTo("Start", "return")


:: Do/Redo Test
@(_counter = 0)
Counter: @redoable { _counter }

@link("Click this to increment the counter, then call redo()", () => {
  _counter++;
  Engine.redo();
})

@linkTo("Start", "return")


:: Error Test
@linkTo("Start")

Here's an error: [[Passage|Maybe->Maybe Not]]


:: Captures Test
Here's a list:
<ul>
  @for(_i of [1, 2, 3, 4]) {
    <li>@link("Link #" + _i, () => alert("You clicked Link #" + _i + "!"))</li>
  }
</ul>

[[Start]]


:: Naked Variable Test
[[Start]]

@($player = { name: 'Chris', strength: 15 })
Your name is $player.name and your strength is $player.strength

@(_player = $player, $player.inventory = ["sword", "hammer"])
You are carrying a _player.inventory[0] and a _player.inventory[1].

// Don't put functions in variables
@(_sayNumber = (number) => "Hello! Your number is " + number)
_sayNumber(5 + 7)


:: Template Strings Test
[[Start]]

@(_x = "world")
@print(`hello ${_x}`)


:: Dynamic Attributes Test
[[Start]]

@(_title = "Hello World")
<span title=(_title + "!")>HOVER ME</span>


:: RegExp Literal Test
[[Start]]

@-(/ok/.exec("big ok match"))

@-(6.6 / 3.3 === 2 ? "ok" : "fail")
